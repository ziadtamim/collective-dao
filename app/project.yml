name: Nouns
options:
  createIntermediateGroups: true
  indentWidth: 2
  tabWidth: 2
  bundleIdPrefix: "ca.mohammedibrahim"
packages:
  Rswift:
    url: https://github.com/mac-cain13/R.swift.Library.git
    from: 5.4.0
  Apollo:
    url: https://github.com/apollographql/apollo-ios
    from: 0.49.1
settings:
  base:
    MARKETING_VERSION: 1
    CURRENT_PROJECT_VERSION: 1

targets:
# Nouns iOS App
  Nouns:
    type: application
    platform: iOS
    deploymentTarget: "15.0"
    sources:
      - path: Nouns
    settings:
      base:
        INFOPLIST_FILE: Nouns/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nouns
    dependencies:
      - package: Rswift
      - framework: NounsServices.framework
        target: NounsServices_iOS
    scheme:
      testTargets:
        - Nouns iOS Tests
        - Nouns iOS UITests
    preBuildScripts:
      - script: |
                /usr/bin/xcrun --sdk macosx swift run rswift generate "$SRCROOT/Nouns/Utils/R.generated.swift"
        name: R.swift
        inputFiles:
          - $TEMP_DIR/rswift-lastrun
        outputFiles:
          - $SRCROOT/Nouns/Utils/R.generated.swift
    postBuildScripts:
      - script: |
                /usr/bin/xcrun --sdk macosx swift run swiftlint lint "$SRCROOT"
        name: SwiftLint

# Nouns iOS Unit Tests
  Nouns iOS Tests:
    type: bundle.unit-test
    platform: iOS
    deploymentTarget: "15.0"
    sources:
      - path: NounsTests
    settings:
      base:
        INFOPLIST_FILE: NounsTests/Info.plist
    dependencies:
      - target: Nouns

# Nouns iOS UI Tests
  Nouns iOS UITests:
    type: bundle.ui-testing
    platform: iOS
    deploymentTarget: "15.0"
    sources:
      - path: NounsUITests
    settings:
      base:
        INFOPLIST_FILE: NounsUITests/Info.plist
    dependencies:
      - target: Nouns

# Nouns Watch App
  Nouns Watch:
    type: application.watchapp2
    platform: watchOS
    deploymentTarget: "8.0"
    sources:
      - path: NounsWatch
    dependencies:
      - target: "Nouns WatchKit Extension"
    settings:
      base:
        INFOPLIST_FILE: NounsWatch/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nouns.watchkitapp
  
  # Nouns WatchKit Extension
  Nouns WatchKit Extension:
    type: watchkit2-extension
    platform: watchOS
    deploymentTarget: "8.0"
    sources:
      - path: NounsWatch WatchKit Extension
    settings:
      base:
        INFOPLIST_FILE:  NounsWatch WatchKit Extension/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nouns.watchkitapp.watchextension
    dependencies:
      - package: Rswift
      - framework: NounsServices.framework
        target: NounsServices_watchOS
    scheme:
      testTargets:
        - Nouns Watch Tests
    preBuildScripts:
      - script: |
                /usr/bin/xcrun --sdk macosx swift run rswift generate "$SRCROOT/NounsWatch WatchKit Extension/Utils/R.generated.swift"
        name: R.swift
        inputFiles:
          - $TEMP_DIR/rswift-lastrun
        outputFiles:
          - $SRCROOT/NounsWatch WatchKit Extension/Utils/R.generated.swift
    postBuildScripts:
      - script: |
                /usr/bin/xcrun --sdk macosx swift run swiftlint lint "$SRCROOT"
        name: SwiftLint

# Nouns Watch Unit Tests
  Nouns Watch Tests:
    type: bundle.unit-test
    platform: watchOS
    deploymentTarget: "8.0"
    sources:
      - path: NounsWatchTests
    settings:
      base:
        INFOPLIST_FILE:  NounsWatchTests/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nouns.watchkitapp.tests
        TEST_HOST: Nouns WatchKit Extension
    dependencies:
      - target: Nouns WatchKit Extension

# Nouns Watch UI Tests
  Nouns Watch UITests:
    type: bundle.ui-testing
    platform: watchOS
    deploymentTarget: "8.0"
    sources:
      - path: NounsWatchUITests
    settings:
      base:
        INFOPLIST_FILE:  NounsWatchUITests/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nouns.watchkitapp.uitest
        TEST_TARGET_NAME: Nouns Watch
    dependencies:
      - target: Nouns Watch

# NounsServices (Framework)
  NounsServices:
    type: framework
    platform: [iOS, watchOS]
    sources:
      - path: NounsServices
    dependencies:
      - package: Apollo
        product: ApolloWebSocket
    settings:
      base:
        INFOPLIST_FILE:  NounsServices/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nounsservices
    preBuildScripts:
      - script: |
                # Go to the build root and search up the chain to find the Derived Data Path where the source packages are checked out.
                DERIVED_DATA_CANDIDATE="${BUILD_ROOT}"

                while ! [ -d "${DERIVED_DATA_CANDIDATE}/SourcePackages" ]; do
                  if [ "${DERIVED_DATA_CANDIDATE}" = / ]; then
                    echo >&2 "error: Unable to locate SourcePackages directory from BUILD_ROOT: '${BUILD_ROOT}'"
                    exit 1
                  fi

                  DERIVED_DATA_CANDIDATE="$(dirname "${DERIVED_DATA_CANDIDATE}")"
                done

                # Grab a reference to the directory where scripts are checked out
                SCRIPT_PATH="${DERIVED_DATA_CANDIDATE}/SourcePackages/checkouts/apollo-ios/scripts"

                if [ -z "${SCRIPT_PATH}" ]; then
                    echo >&2 "error: Couldn't find the CLI script in your checked out SPM packages; make sure to add the framework to your project."
                    exit 1
                fi

                cd "${SRCROOT}/NounsServices/GraphQL"

                "${SCRIPT_PATH}"/run-bundled-codegen.sh schema:download --endpoint="https://api.thegraph.com/subgraphs/name/nounsdao/nouns-subgraph"
        name: Apollo Schema Generation
      - script: |
                # Go to the build root and search up the chain to find the Derived Data Path where the source packages are checked out.
                DERIVED_DATA_CANDIDATE="${BUILD_ROOT}"

                while ! [ -d "${DERIVED_DATA_CANDIDATE}/SourcePackages" ]; do
                  if [ "${DERIVED_DATA_CANDIDATE}" = / ]; then
                    echo >&2 "error: Unable to locate SourcePackages directory from BUILD_ROOT: '${BUILD_ROOT}'"
                    exit 1
                  fi

                  DERIVED_DATA_CANDIDATE="$(dirname "${DERIVED_DATA_CANDIDATE}")"
                done

                # Grab a reference to the directory where scripts are checked out
                SCRIPT_PATH="${DERIVED_DATA_CANDIDATE}/SourcePackages/checkouts/apollo-ios/scripts"

                if [ -z "${SCRIPT_PATH}" ]; then
                    echo >&2 "error: Couldn't find the CLI script in your checked out SPM packages; make sure to add the framework to your project."
                    exit 1
                fi

                cd "${SRCROOT}/NounsServices"
                "${SCRIPT_PATH}"/run-bundled-codegen.sh codegen:generate --target=swift --includes=./**/*.graphql --localSchemaFile="./GraphQL/schema.json" GraphQL/API.swift
        name: Apollo API Codegen
        inputFiles:
          - $SRCROOT/NounsServices/GraphQL/schema.json
        outputFiles:
          - $SRCROOT/NounsServices/GraphQL/API.swift

# NounsServices Tests (Framework)
  NounsServices Tests:
    type: bundle.unit-test
    platform: [iOS, watchOS]
    sources:
      - path: NounsServicesTests
    settings:
      base:
        INFOPLIST_FILE:  NounsServicesTests/Info.plist
        PRODUCT_BUNDLE_IDENTIFIER: ca.mohammedibrahim.nounsservices.tests
    dependencies:
      - target: NounsServices_${platform}

